---
interface Link {
    label: string,
    url: string
}

interface Navigation extends Array<Link>{}

const NavigationLinks:Navigation = [
    {
        label: 'About me',
        url: '/about-me',
    }/* ,
    {
        label: 'Playground',
        url: '/playground'
    } */
];
---
<nav class="js-menu">
    <div class="nav-menu">
        <svg class="js-close-menu" width="48" height="48" viewBox="0 0 24 24">
            <path d="M18.984 6.422l-5.578 5.578 5.578 5.578-1.406 1.406-5.578-5.578-5.578 5.578-1.406-1.406 5.578-5.578-5.578-5.578 1.406-1.406 5.578 5.578 5.578-5.578z"></path>
        </svg>
        { NavigationLinks.map((link, i, arr) => {
            return <a cursor-class="link" href={link.url} data-astro-reload>{link.label}</a>
            })
        }
    </div>            
</nav>

<script>
	const menu = document.querySelector('.js-menu');
	const btnIconMenu = document.querySelector('.js-close-menu');
	
	btnIconMenu.addEventListener('click', () => {
		menu.classList.remove('is-opened')
	})
</script>

<style lang="scss">
nav {
    &:after {
        background-color: rgba(0,0,0,.75);
        content: '';
        left: 0;
        height: 100vh;
        position: absolute;
        top: 0;
        width: 100%;
        transition: opacity 2s ease-in, visibility .25s linear .125s;
        visibility: hidden;
        z-index: 0;

        @media screen and (min-width: 768px) {
            display: none;
        }
    }

    &.is-opened {
        &:after {
            opacity: 1;
            visibility: visible;
        }
    }
    @media screen and (min-width: 768px) {
		svg {
			display: none;
		}
	}
}

.nav-menu {
    background-color: var(--white);
    display: flex;
    gap: 24px; 
    flex-direction: column; 
    height: 100vh;
    opacity: 0;
    padding: 32px;
    padding-right: calc(10% + 32px);
    padding-bottom: 0;
    position: absolute;
    right: 0;
    top: 0;
    transition: transform .35s linear .125s, opacity .25s ease-in, visibility .5s linear;
    transform: translateX(100%);
    visibility: hidden;
    width: 100%;
    z-index: 2;

    .is-opened & {
        opacity: 1;
        transform: translateX(10%);
        visibility: visible;
    }

    svg {
        margin-left: auto
    }

    @media screen and (min-width: 768px) {
        background-color: transparent;
        display: flex;
        column-gap: 16px;
        flex-direction: row;
        height: auto;
        opacity: 1;
        padding: 0;
        position: relative;
        transform: none;
        visibility: visible;
    }    
}
a {
    font-size: 48px;
    font-family: var(--base-font-family-serif);
    font-weight: 700;
    position: relative;
    text-transform: capitalize;
    text-decoration: none;
    transition: all .25s ease-in-out;

    &:after {
        content: '';
        left: 0;
        position: absolute;
        height: 2px;
        transition: all .25s linear;
        top: calc(100% - 2px);
        width: 0;
    }

    &:hover {
        cursor: none;
        //transform: scale(1.1);
        text-decoration: none;
    }

    &:hover::after {
        width: 100%;
        background-color: var(--dark-black);
    }

    @media screen and (min-width: 768px) {
        font-size: 20px;
    }

    @media (prefers-color-scheme: dark) {
        color: var(--light-gray);
    }

    @media (prefers-color-scheme: light) {
        color: var(--dark-black);
    }
}     

</style>