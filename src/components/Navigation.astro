---
interface Link {
    label: string,
    url: string
}

interface Navigation extends Array<Link>{}

const NavigationLinks:Navigation = [
    {
        label: 'About me',
        url: '/about-me',
    },
    {
        label: 'Playground',
        url: '/playground',
    }
];
---
<nav class="js-menu">
    <button class="btn-menu js-btn-menu">
        <svg id="icon-menu" viewBox="0 0 24 24">
            <path d="M3 13h18c0.552 0 1-0.448 1-1s-0.448-1-1-1h-18c-0.552 0-1 0.448-1 1s0.448 1 1 1zM3 7h18c0.552 0 1-0.448 1-1s-0.448-1-1-1h-18c-0.552 0-1 0.448-1 1s0.448 1 1 1zM3 19h18c0.552 0 1-0.448 1-1s-0.448-1-1-1h-18c-0.552 0-1 0.448-1 1s0.448 1 1 1z"></path>
        </svg>
    </button>
    <div class="nav-menu">
        { NavigationLinks.map((link, i, arr) => {
            console.log(link)
            return <a href={link.url} data-astro-reload>{link.label}</a>
            })
        }
    </div>            
</nav>

<script>
    const navMenu = document.querySelector('.js-menu');
    const btnMenu = document.querySelector('.js-btn-menu');

    btnMenu.addEventListener('click', () => {
        navMenu.classList.toggle('is-opened');
    })
</script>

<style lang="scss">
nav {
    &:after {
        background-color: rgba(0,0,0,.75);
        content: '';
        left: 0;
        height: 100vh;
        position: absolute;
        top: 0;
        width: 100%;
        transition: opacity 2s ease-in, visibility .25s linear .125s;
        visibility: hidden;
        z-index: 0;

        @media screen and (min-width: 1024px) {
            display: none;
        }
    }

    &.is-opened {
        &:after {
            opacity: 1;
            visibility: visible;
        }
    }
}

.nav-menu {
    background-color: var(--white);
    display: flex;
    gap: 48px;
    flex-direction: column;
    height: 100vh;
    opacity: 0;
    padding-top: 80px;
    padding-right: calc(10% + 48px);
    position: absolute;
    right: 0;
    text-align: right;
    top: 0;
    transition: transform .35s linear .125s, opacity .25s ease-in, visibility .5s linear;
    transform: translateX(100%);
    visibility: hidden;
    width: 100%;
    z-index: 1;

    .is-opened & {
        opacity: 1;
        transform: translateX(10%);
        visibility: visible;
    }

    @media screen and (min-width: 1024px) {
        background-color: transparent;
        display: flex;
        column-gap: 16px;
        flex-direction: row;
        height: auto;
        opacity: 1;
        padding: 0;
        position: relative;
        transform: none;
        visibility: visible;
    }

    
}

.btn-menu {
    border: 0;
    bottom: 16px;
    border-radius: 50%;
    box-shadow: 0 5px 15px -5px rgba(0,0,0,0.5);
    height: 48px;
    position: fixed;
    right: 16px;
    width: 48px;
    z-index: 2;
    @media screen and (min-width: 1024px) {
        display: none;
    }

    @media (prefers-color-scheme: light) {
        background-color: var(--dark-black);

        svg {
            height: 24px;
            fill: var(--orange);
            width: 24px;
        }
    }
}

a {
    font-size: 64px;
    font-weight: 700;
    text-transform: uppercase;
    text-decoration: none;
    transition: all .25s ease-in-out;

    &:hover {
        opacity: .5;
    }

    @media screen and (min-width: 1024px) {
        font-size: 16px;
    }

    @media (prefers-color-scheme: dark) {
        color: var(--light-gray);
    }

    @media (prefers-color-scheme: light) {
        color: var(--dark-black);
    }
}     

</style>