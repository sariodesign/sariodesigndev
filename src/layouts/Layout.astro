---

import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
export interface Props {
	title: string;
	metaDescription: string
}

const { title, metaDescription } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="theme-light js-page">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&family=Roboto+Serif:opsz,wght@8..144,700&display=swap" rel="stylesheet">
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content={metaDescription} />
		<script>
			window.va = window.va || function () { (window.vaq = window.vaq || []).push(arguments); };
		</script>
		<script defer src="/_vercel/insights/script.js"></script>
		<title>{title}</title>
	</head>
	<body class="js-body">
		<div id="cursor">
			<div class="cursor__circle"></div>
		</div>
		<Header />
		<slot transition:animate={fade()} />
		<Footer />
	</body>
</html>
<style is:global  lang="scss">
	:root {
		--dark-black: #102020;
		--light-gray: #eee;
		--white: #fff;
		--orange: #DD7A4C;
		--base-font-family: 'Roboto Mono', monospace;
		--base-font-family-serif: 'Roboto Serif', monospace;
		--header-bg: rgba(255, 255, 255, 0.85);
	}

	* {
		box-sizing: border-box;
	}

	html {
		overflow-x: hidden;

		&.is-locked {
			overflow-y: hidden;
		}
	}
	body {
		cursor: none;
		font-family: var(--base-font-family);
		font-size: 16px;
		margin: 0;
		overflow-x: hidden;

		.is-locked & {
			overflow-y: hidden;
		}
	}

	body a:hover {
		cursor: none;
	}

	main {
		align-items: center;
		display: flex;
		justify-content: center;
	}

	h1 {
		font-family: var(--base-font-family);

		span {
			font-family: var(--base-font-family-serif);
		}
	}
	@media (prefers-color-scheme: dark) {
		html {
			background-color: var(--dark-black);
		}
	}

	@media (prefers-color-scheme: light) {
		html {
			background-color: var(--light-gray);
		}
	}

	@media screen and (min-width: 1024px) {
		main {
			min-height: 100vh;
		}
	}

	.btn-menu {
    border: 0;
    bottom: 16px;
    border-radius: 50%;
    box-shadow: 0 5px 15px -5px rgba(0,0,0,0.5);
    height: 48px;
    position: fixed;
    right: 16px;
    width: 48px;
    z-index: 2;
    @media screen and (min-width: 1024px) {
        display: none;
    }

    @media (prefers-color-scheme: light) {
        background-color: var(--dark-black);

        svg {
            height: 24px;
            fill: var(--orange);
            width: 24px;
        }
    }
	}

	#cursor {
		position: fixed;
		z-index: 99;
		left: 0;
		top: 0;
		pointer-events: none;
		will-change: transform;
		mix-blend-mode: difference;
	}

	@media (hover: hover) and (pointer: fine) {
		.cursor__circle {
			background-color: var(--white);
			width: 32px;
			height: 32px;
			margin-top: -50%;
			margin-left: -50%;
			border-radius: 50%;
			transition: opacity 0.3s cubic-bezier(0.25, 1, 0.5, 1),
				background-color 0.3s cubic-bezier(0.25, 1, 0.5, 1),
				border-color 0.3s cubic-bezier(0.25, 1, 0.5, 1),
				width 0.3s cubic-bezier(0.25, 1, 0.5, 1),
				height 0.3s cubic-bezier(0.25, 1, 0.5, 1);
		}

		.text .cursor__circle {
			width: 64px;
			height: 64px;
		}

		.link .cursor__circle {
			width: 16px;
			height: 16px;
		}

		@media screen and (min-width: 1024px) {
			.photo .cursor__circle {
				height: 140px;
				width: 140px;
			}

		}

		@media screen and (min-width: 1366px) {
			.photo .cursor__circle {
				height: 160px;
				width: 160px;
			}

			.square .cursor__circle {
				background-color: transparent;
				border-radius: 2px;
				border: 2px solid var(--orange);
				height: 40px;
				width: 100px;
			}

		}
	}

	.contact-links {
		display: none;
		gap: 16px;
		
		@media screen and (min-width: 1024px) {
				display: flex;
		}
	}
	
	.contact-link {
		display: inline-flex;
		font-size: 14px;
		gap: 8px;
		align-items: center;
		transition: all .25s linear;
    text-decoration: none;

		@media (prefers-color-scheme: dark) {
			color: var(--white);
		}
		@media (prefers-color-scheme: light) {
			color: var(--dark-black);
		}
	}
</style>

<script>
	const cursor = document.querySelector<HTMLElement>('#cursor');
	const cursorCircle = cursor.querySelector<HTMLElement>('.cursor__circle');

	const mouse = { x: -100, y: -100 }; // mouse pointer's coordinates
	const pos = { x: 0, y: 0 }; // cursor's coordinates
	const speed = 0.1; // between 0 and 1

	const updateCoordinates = e => {
		mouse.x = e.clientX;
		mouse.y = e.clientY;
	}

	window.addEventListener('mousemove', updateCoordinates);

	function getAngle(diffX, diffY) {
  return Math.atan2(diffY, diffX) * 180 / Math.PI;
}

function getSqueeze(diffX, diffY) {
  const distance = Math.sqrt(
    Math.pow(diffX, 2) + Math.pow(diffY, 2)
  );
  const maxSqueeze = 0.15;
  const accelerator = 1500;
  return Math.min(distance / accelerator, maxSqueeze);
}


const updateCursor = () => {
  const diffX = Math.round(mouse.x - pos.x);
  const diffY = Math.round(mouse.y - pos.y);
  
  pos.x += diffX * speed;
  pos.y += diffY * speed;
  
  const angle = getAngle(diffX, diffY);
  const squeeze = getSqueeze(diffX, diffY);
  
  const scale = 'scale(' + (1 + squeeze) + ', ' + (1 - squeeze) +')';
  const rotate = 'rotate(' + angle +'deg)';
  const translate = 'translate3d(' + pos.x + 'px ,' + pos.y + 'px, 0)';

  cursor.style.transform = translate;
  cursorCircle.style.transform = rotate + scale;
};

function loop() {
  updateCursor();
  requestAnimationFrame(loop);
}

requestAnimationFrame(loop);

const cursorModifiers = document.querySelectorAll('[cursor-class]');

cursorModifiers.forEach(curosrModifier => {
  curosrModifier.addEventListener('mouseenter', function() {
    const className = this.getAttribute('cursor-class');
    cursor.classList.add(className);
  });
  
  curosrModifier.addEventListener('mouseleave', function() {
    const className = this.getAttribute('cursor-class');
    cursor.classList.remove(className);
  });
});
</script>
